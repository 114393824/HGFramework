--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'hero_constants'

C2SBattleHero = __TObject:new{
  heroId,
  Battle
}

function C2SBattleHero:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.Battle = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SBattleHero:write(oprot)
  oprot:writeStructBegin('C2SBattleHero')
  if self.heroId then
    oprot:writeFieldBegin('heroId', TType.STRING, 1)
    oprot:writeString(self.heroId)
    oprot:writeFieldEnd()
  end
  if self.Battle then
    oprot:writeFieldBegin('Battle', TType.BOOL, 2)
    oprot:writeBool(self.Battle)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CBattleHero = __TObject:new{

}

function S2CBattleHero:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CBattleHero:write(oprot)
  oprot:writeStructBegin('S2CBattleHero')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SComposeHero = __TObject:new{
  heroConfigId
}

function C2SComposeHero:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroConfigId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SComposeHero:write(oprot)
  oprot:writeStructBegin('C2SComposeHero')
  if self.heroConfigId then
    oprot:writeFieldBegin('heroConfigId', TType.STRING, 1)
    oprot:writeString(self.heroConfigId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CComposeHero = __TObject:new{
  hero,
  curGold,
  cost
}

function S2CComposeHero:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.hero = HeroDTO:new{}
        self.hero:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.cost = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = ItemDTO:new{}
          _elem4:read(iprot)
          table.insert(self.cost, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CComposeHero:write(oprot)
  oprot:writeStructBegin('S2CComposeHero')
  if self.hero then
    oprot:writeFieldBegin('hero', TType.STRUCT, 1)
    self.hero:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 2)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.cost then
    oprot:writeFieldBegin('cost', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.cost)
    for _,iter5 in ipairs(self.cost) do
      iter5:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SHeroIncrQuality = __TObject:new{
  heroId
}

function C2SHeroIncrQuality:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SHeroIncrQuality:write(oprot)
  oprot:writeStructBegin('C2SHeroIncrQuality')
  if self.heroId then
    oprot:writeFieldBegin('heroId', TType.STRING, 1)
    oprot:writeString(self.heroId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CHeroIncrQuality = __TObject:new{
  hero,
  curGold,
  cost
}

function S2CHeroIncrQuality:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.hero = HeroDTO:new{}
        self.hero:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.cost = {}
        local _etype9, _size6 = iprot:readListBegin()
        for _i=1,_size6 do
          local _elem10 = ItemDTO:new{}
          _elem10:read(iprot)
          table.insert(self.cost, _elem10)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CHeroIncrQuality:write(oprot)
  oprot:writeStructBegin('S2CHeroIncrQuality')
  if self.hero then
    oprot:writeFieldBegin('hero', TType.STRUCT, 1)
    self.hero:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 2)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.cost then
    oprot:writeFieldBegin('cost', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.cost)
    for _,iter11 in ipairs(self.cost) do
      iter11:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SSkillIncrLevel = __TObject:new{
  heroId,
  skillConfigId
}

function C2SSkillIncrLevel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.skillConfigId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SSkillIncrLevel:write(oprot)
  oprot:writeStructBegin('C2SSkillIncrLevel')
  if self.heroId then
    oprot:writeFieldBegin('heroId', TType.STRING, 1)
    oprot:writeString(self.heroId)
    oprot:writeFieldEnd()
  end
  if self.skillConfigId then
    oprot:writeFieldBegin('skillConfigId', TType.STRING, 2)
    oprot:writeString(self.skillConfigId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CSkillIncrLevel = __TObject:new{
  heroId,
  skill,
  curGold,
  curSkillPoint
}

function S2CSkillIncrLevel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.skill = SkillDTO:new{}
        self.skill:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.curSkillPoint = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CSkillIncrLevel:write(oprot)
  oprot:writeStructBegin('S2CSkillIncrLevel')
  if self.heroId then
    oprot:writeFieldBegin('heroId', TType.STRING, 1)
    oprot:writeString(self.heroId)
    oprot:writeFieldEnd()
  end
  if self.skill then
    oprot:writeFieldBegin('skill', TType.STRUCT, 2)
    self.skill:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 3)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.curSkillPoint then
    oprot:writeFieldBegin('curSkillPoint', TType.I32, 4)
    oprot:writeI32(self.curSkillPoint)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SEquipSkillItem = __TObject:new{
  heroId,
  itemConfigId
}

function C2SEquipSkillItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.itemConfigId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SEquipSkillItem:write(oprot)
  oprot:writeStructBegin('C2SEquipSkillItem')
  if self.heroId then
    oprot:writeFieldBegin('heroId', TType.STRING, 1)
    oprot:writeString(self.heroId)
    oprot:writeFieldEnd()
  end
  if self.itemConfigId then
    oprot:writeFieldBegin('itemConfigId', TType.STRING, 2)
    oprot:writeString(self.itemConfigId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CEquipSkillItem = __TObject:new{
  heroId,
  param1,
  param2,
  costItems
}

function S2CEquipSkillItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.heroId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.DOUBLE then
        self.param1 = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.DOUBLE then
        self.param2 = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.costItems = ItemDTO:new{}
        self.costItems:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CEquipSkillItem:write(oprot)
  oprot:writeStructBegin('S2CEquipSkillItem')
  if self.heroId then
    oprot:writeFieldBegin('heroId', TType.STRING, 1)
    oprot:writeString(self.heroId)
    oprot:writeFieldEnd()
  end
  if self.param1 then
    oprot:writeFieldBegin('param1', TType.DOUBLE, 2)
    oprot:writeDouble(self.param1)
    oprot:writeFieldEnd()
  end
  if self.param2 then
    oprot:writeFieldBegin('param2', TType.DOUBLE, 3)
    oprot:writeDouble(self.param2)
    oprot:writeFieldEnd()
  end
  if self.costItems then
    oprot:writeFieldBegin('costItems', TType.STRUCT, 4)
    self.costItems:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end