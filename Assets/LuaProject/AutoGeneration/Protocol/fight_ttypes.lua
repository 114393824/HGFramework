--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'fight_constants'

FightResult = {
  Victory = 0,
  Defeat = 1
}

ChapterType = {
  PVE = 0,
  Wild = 1
}

C2SFightResult = __TObject:new{

}

function C2SFightResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SFightResult:write(oprot)
  oprot:writeStructBegin('C2SFightResult')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CFightResult = __TObject:new{
  curGold,
  heros,
  dropThings,
  summonerExp,
  summonerLevel
}

function S2CFightResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.heros = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = HeroDTO:new{}
          _elem4:read(iprot)
          table.insert(self.heros, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.dropThings = {}
        local _etype8, _size5 = iprot:readListBegin()
        for _i=1,_size5 do
          local _elem9 = ItemDTO:new{}
          _elem9:read(iprot)
          table.insert(self.dropThings, _elem9)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.summonerExp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.summonerLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CFightResult:write(oprot)
  oprot:writeStructBegin('S2CFightResult')
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 1)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.heros then
    oprot:writeFieldBegin('heros', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.heros)
    for _,iter10 in ipairs(self.heros) do
      iter10:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.dropThings then
    oprot:writeFieldBegin('dropThings', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.dropThings)
    for _,iter11 in ipairs(self.dropThings) do
      iter11:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.summonerExp then
    oprot:writeFieldBegin('summonerExp', TType.I32, 4)
    oprot:writeI32(self.summonerExp)
    oprot:writeFieldEnd()
  end
  if self.summonerLevel then
    oprot:writeFieldBegin('summonerLevel', TType.I32, 5)
    oprot:writeI32(self.summonerLevel)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FightRewardDTO = __TObject:new{
  itemReward,
  sepcialReward,
  curStamina,
  curGold,
  curSummonerLevel,
  curSummonerExp
}

function FightRewardDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.itemReward = {}
        local _etype15, _size12 = iprot:readListBegin()
        for _i=1,_size12 do
          local _elem16 = {}
          local _etype20, _size17 = iprot:readListBegin()
          for _i=1,_size17 do
            local _elem21 = ItemDTO:new{}
            _elem21:read(iprot)
            table.insert(_elem16, _elem21)
          end
          iprot:readListEnd()
          table.insert(self.itemReward, _elem16)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.sepcialReward = {}
        local _etype25, _size22 = iprot:readListBegin()
        for _i=1,_size22 do
          local _elem26 = {}
          local _etype30, _size27 = iprot:readListBegin()
          for _i=1,_size27 do
            local _elem31 = ItemDTO:new{}
            _elem31:read(iprot)
            table.insert(_elem26, _elem31)
          end
          iprot:readListEnd()
          table.insert(self.sepcialReward, _elem26)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.curStamina = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.curSummonerLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.curSummonerExp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FightRewardDTO:write(oprot)
  oprot:writeStructBegin('FightRewardDTO')
  if self.itemReward then
    oprot:writeFieldBegin('itemReward', TType.LIST, 1)
    oprot:writeListBegin(TType.LIST, #self.itemReward)
    for _,iter32 in ipairs(self.itemReward) do
      oprot:writeListBegin(TType.STRUCT, #iter32)
      for _,iter33 in ipairs(iter32) do
        iter33:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.sepcialReward then
    oprot:writeFieldBegin('sepcialReward', TType.LIST, 2)
    oprot:writeListBegin(TType.LIST, #self.sepcialReward)
    for _,iter34 in ipairs(self.sepcialReward) do
      oprot:writeListBegin(TType.STRUCT, #iter34)
      for _,iter35 in ipairs(iter34) do
        iter35:write(oprot)
      end
      oprot:writeListEnd()
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.curStamina then
    oprot:writeFieldBegin('curStamina', TType.I32, 3)
    oprot:writeI32(self.curStamina)
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 4)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.curSummonerLevel then
    oprot:writeFieldBegin('curSummonerLevel', TType.I32, 5)
    oprot:writeI32(self.curSummonerLevel)
    oprot:writeFieldEnd()
  end
  if self.curSummonerExp then
    oprot:writeFieldBegin('curSummonerExp', TType.I32, 6)
    oprot:writeI32(self.curSummonerExp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SFightLevel = __TObject:new{
  chapterType,
  chapterId,
  levelId,
  fightResult
}

function C2SFightLevel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.chapterType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chapterId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.levelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.fightResult = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SFightLevel:write(oprot)
  oprot:writeStructBegin('C2SFightLevel')
  if self.chapterType then
    oprot:writeFieldBegin('chapterType', TType.I32, 1)
    oprot:writeI32(self.chapterType)
    oprot:writeFieldEnd()
  end
  if self.chapterId then
    oprot:writeFieldBegin('chapterId', TType.STRING, 2)
    oprot:writeString(self.chapterId)
    oprot:writeFieldEnd()
  end
  if self.levelId then
    oprot:writeFieldBegin('levelId', TType.STRING, 3)
    oprot:writeString(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.fightResult then
    oprot:writeFieldBegin('fightResult', TType.I32, 4)
    oprot:writeI32(self.fightResult)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CFightLevel = __TObject:new{
  chapterType,
  chapterId,
  levelId,
  levelLeftTimes,
  fightReward
}

function S2CFightLevel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.chapterType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chapterId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.levelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.levelLeftTimes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.fightReward = FightRewardDTO:new{}
        self.fightReward:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CFightLevel:write(oprot)
  oprot:writeStructBegin('S2CFightLevel')
  if self.chapterType then
    oprot:writeFieldBegin('chapterType', TType.I32, 1)
    oprot:writeI32(self.chapterType)
    oprot:writeFieldEnd()
  end
  if self.chapterId then
    oprot:writeFieldBegin('chapterId', TType.STRING, 2)
    oprot:writeString(self.chapterId)
    oprot:writeFieldEnd()
  end
  if self.levelId then
    oprot:writeFieldBegin('levelId', TType.STRING, 3)
    oprot:writeString(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.levelLeftTimes then
    oprot:writeFieldBegin('levelLeftTimes', TType.I32, 4)
    oprot:writeI32(self.levelLeftTimes)
    oprot:writeFieldEnd()
  end
  if self.fightReward then
    oprot:writeFieldBegin('fightReward', TType.STRUCT, 5)
    self.fightReward:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SFightRaid = __TObject:new{
  chapterType,
  chapterId,
  levelId,
  times
}

function C2SFightRaid:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.chapterType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chapterId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.levelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.times = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SFightRaid:write(oprot)
  oprot:writeStructBegin('C2SFightRaid')
  if self.chapterType then
    oprot:writeFieldBegin('chapterType', TType.I32, 1)
    oprot:writeI32(self.chapterType)
    oprot:writeFieldEnd()
  end
  if self.chapterId then
    oprot:writeFieldBegin('chapterId', TType.STRING, 2)
    oprot:writeString(self.chapterId)
    oprot:writeFieldEnd()
  end
  if self.levelId then
    oprot:writeFieldBegin('levelId', TType.STRING, 3)
    oprot:writeString(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.times then
    oprot:writeFieldBegin('times', TType.I32, 4)
    oprot:writeI32(self.times)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CFightRaid = __TObject:new{
  chapterType,
  chapterId,
  levelId,
  raidBonus,
  curRaidTicketCount,
  levelLeftTimes,
  fightReward
}

function S2CFightRaid:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.chapterType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.chapterId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.levelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.raidBonus = {}
        local _etype39, _size36 = iprot:readListBegin()
        for _i=1,_size36 do
          local _elem40 = ItemDTO:new{}
          _elem40:read(iprot)
          table.insert(self.raidBonus, _elem40)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.curRaidTicketCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.levelLeftTimes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRUCT then
        self.fightReward = FightRewardDTO:new{}
        self.fightReward:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CFightRaid:write(oprot)
  oprot:writeStructBegin('S2CFightRaid')
  if self.chapterType then
    oprot:writeFieldBegin('chapterType', TType.I32, 1)
    oprot:writeI32(self.chapterType)
    oprot:writeFieldEnd()
  end
  if self.chapterId then
    oprot:writeFieldBegin('chapterId', TType.STRING, 2)
    oprot:writeString(self.chapterId)
    oprot:writeFieldEnd()
  end
  if self.levelId then
    oprot:writeFieldBegin('levelId', TType.STRING, 3)
    oprot:writeString(self.levelId)
    oprot:writeFieldEnd()
  end
  if self.raidBonus then
    oprot:writeFieldBegin('raidBonus', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.raidBonus)
    for _,iter41 in ipairs(self.raidBonus) do
      iter41:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.curRaidTicketCount then
    oprot:writeFieldBegin('curRaidTicketCount', TType.I32, 5)
    oprot:writeI32(self.curRaidTicketCount)
    oprot:writeFieldEnd()
  end
  if self.levelLeftTimes then
    oprot:writeFieldBegin('levelLeftTimes', TType.I32, 6)
    oprot:writeI32(self.levelLeftTimes)
    oprot:writeFieldEnd()
  end
  if self.fightReward then
    oprot:writeFieldBegin('fightReward', TType.STRUCT, 7)
    self.fightReward:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SPvp = __TObject:new{
  summonerId
}

function C2SPvp:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.summonerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SPvp:write(oprot)
  oprot:writeStructBegin('C2SPvp')
  if self.summonerId then
    oprot:writeFieldBegin('summonerId', TType.STRING, 1)
    oprot:writeString(self.summonerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CPvp = __TObject:new{
  leftPvpPoint
}

function S2CPvp:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.leftPvpPoint = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CPvp:write(oprot)
  oprot:writeStructBegin('S2CPvp')
  if self.leftPvpPoint then
    oprot:writeFieldBegin('leftPvpPoint', TType.I32, 1)
    oprot:writeI32(self.leftPvpPoint)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SPvpSettlemennt = __TObject:new{

}

function C2SPvpSettlemennt:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SPvpSettlemennt:write(oprot)
  oprot:writeStructBegin('C2SPvpSettlemennt')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CPvpSettlement = __TObject:new{
  curRank
}

function S2CPvpSettlement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.curRank = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CPvpSettlement:write(oprot)
  oprot:writeStructBegin('S2CPvpSettlement')
  if self.curRank then
    oprot:writeFieldBegin('curRank', TType.I32, 1)
    oprot:writeI32(self.curRank)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end