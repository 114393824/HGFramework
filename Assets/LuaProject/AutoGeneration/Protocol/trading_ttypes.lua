--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'trading_constants'

TradingTimesType = {
  Single = 1,
  Ten = 2
}

C2SGoldTrading = __TObject:new{
  type
}

function C2SGoldTrading:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SGoldTrading:write(oprot)
  oprot:writeStructBegin('C2SGoldTrading')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CGoldTrading = __TObject:new{
  newItems,
  curGold,
  leftFreeTimes,
  CDs
}

function S2CGoldTrading:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.newItems = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = ItemDTO:new{}
          _elem4:read(iprot)
          table.insert(self.newItems, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.leftFreeTimes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.CDs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CGoldTrading:write(oprot)
  oprot:writeStructBegin('S2CGoldTrading')
  if self.newItems then
    oprot:writeFieldBegin('newItems', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.newItems)
    for _,iter5 in ipairs(self.newItems) do
      iter5:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 2)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.leftFreeTimes then
    oprot:writeFieldBegin('leftFreeTimes', TType.I32, 3)
    oprot:writeI32(self.leftFreeTimes)
    oprot:writeFieldEnd()
  end
  if self.CDs then
    oprot:writeFieldBegin('CDs', TType.I32, 4)
    oprot:writeI32(self.CDs)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SDiamondTrading = __TObject:new{
  type
}

function C2SDiamondTrading:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SDiamondTrading:write(oprot)
  oprot:writeStructBegin('C2SDiamondTrading')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CDiamondTrading = __TObject:new{
  newItems,
  curDiamond,
  CDs
}

function S2CDiamondTrading:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.newItems = {}
        local _etype9, _size6 = iprot:readListBegin()
        for _i=1,_size6 do
          local _elem10 = ItemDTO:new{}
          _elem10:read(iprot)
          table.insert(self.newItems, _elem10)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.curDiamond = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.CDs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CDiamondTrading:write(oprot)
  oprot:writeStructBegin('S2CDiamondTrading')
  if self.newItems then
    oprot:writeFieldBegin('newItems', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.newItems)
    for _,iter11 in ipairs(self.newItems) do
      iter11:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.curDiamond then
    oprot:writeFieldBegin('curDiamond', TType.I32, 2)
    oprot:writeI32(self.curDiamond)
    oprot:writeFieldEnd()
  end
  if self.CDs then
    oprot:writeFieldBegin('CDs', TType.I32, 3)
    oprot:writeI32(self.CDs)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end