--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'share_constants'

ResponseCode = {
  OK = 0,
  SERVER_FAILED = 1,
  DATA_OUTSYNC = 2,
  GuildNameRepeat = 100,
  GuildFull = 101,
  JoinOtherGuild = 102
}

GuildType = {
  Light = 1,
  Dark = 2
}

GuildMemberType = {
  Member = 1,
  Chairman = 2
}

S2CErrorNotify = __TObject:new{
  errorType
}

function S2CErrorNotify:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.errorType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CErrorNotify:write(oprot)
  oprot:writeStructBegin('S2CErrorNotify')
  if self.errorType then
    oprot:writeFieldBegin('errorType', TType.I32, 1)
    oprot:writeI32(self.errorType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

WeaponDTO = __TObject:new{
  id,
  configId,
  level,
  quality,
  enchantPos2Item,
  essencePos2Item,
  jewelleryPos2Item
}

function WeaponDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.configId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.level = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.quality = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.MAP then
        self.enchantPos2Item = {}
        local _ktype1, _vtype2, _size0 = iprot:readMapBegin() 
        for _i=1,_size0 do
          local _key4 = iprot:readI32()
          local _val5 = iprot:readString()
          self.enchantPos2Item[_key4] = _val5
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.MAP then
        self.essencePos2Item = {}
        local _ktype7, _vtype8, _size6 = iprot:readMapBegin() 
        for _i=1,_size6 do
          local _key10 = iprot:readI32()
          local _val11 = iprot:readString()
          self.essencePos2Item[_key10] = _val11
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.MAP then
        self.jewelleryPos2Item = {}
        local _ktype13, _vtype14, _size12 = iprot:readMapBegin() 
        for _i=1,_size12 do
          local _key16 = iprot:readI32()
          local _val17 = iprot:readString()
          self.jewelleryPos2Item[_key16] = _val17
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function WeaponDTO:write(oprot)
  oprot:writeStructBegin('WeaponDTO')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.configId then
    oprot:writeFieldBegin('configId', TType.STRING, 2)
    oprot:writeString(self.configId)
    oprot:writeFieldEnd()
  end
  if self.level then
    oprot:writeFieldBegin('level', TType.I32, 3)
    oprot:writeI32(self.level)
    oprot:writeFieldEnd()
  end
  if self.quality then
    oprot:writeFieldBegin('quality', TType.I32, 4)
    oprot:writeI32(self.quality)
    oprot:writeFieldEnd()
  end
  if self.enchantPos2Item then
    oprot:writeFieldBegin('enchantPos2Item', TType.MAP, 5)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.enchantPos2Item))
    for kiter18,viter19 in pairs(self.enchantPos2Item) do
      oprot:writeI32(kiter18)
      oprot:writeString(viter19)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.essencePos2Item then
    oprot:writeFieldBegin('essencePos2Item', TType.MAP, 6)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.essencePos2Item))
    for kiter20,viter21 in pairs(self.essencePos2Item) do
      oprot:writeI32(kiter20)
      oprot:writeString(viter21)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.jewelleryPos2Item then
    oprot:writeFieldBegin('jewelleryPos2Item', TType.MAP, 7)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.jewelleryPos2Item))
    for kiter22,viter23 in pairs(self.jewelleryPos2Item) do
      oprot:writeI32(kiter22)
      oprot:writeString(viter23)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ArmorDTO = __TObject:new{
  id,
  configId,
  level,
  quality,
  enchantPos2Item,
  essencePos2Item,
  jewelleryPos2Item
}

function ArmorDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.configId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.level = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.quality = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.MAP then
        self.enchantPos2Item = {}
        local _ktype25, _vtype26, _size24 = iprot:readMapBegin() 
        for _i=1,_size24 do
          local _key28 = iprot:readI32()
          local _val29 = iprot:readString()
          self.enchantPos2Item[_key28] = _val29
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.MAP then
        self.essencePos2Item = {}
        local _ktype31, _vtype32, _size30 = iprot:readMapBegin() 
        for _i=1,_size30 do
          local _key34 = iprot:readI32()
          local _val35 = iprot:readString()
          self.essencePos2Item[_key34] = _val35
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.MAP then
        self.jewelleryPos2Item = {}
        local _ktype37, _vtype38, _size36 = iprot:readMapBegin() 
        for _i=1,_size36 do
          local _key40 = iprot:readI32()
          local _val41 = iprot:readString()
          self.jewelleryPos2Item[_key40] = _val41
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ArmorDTO:write(oprot)
  oprot:writeStructBegin('ArmorDTO')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.configId then
    oprot:writeFieldBegin('configId', TType.STRING, 2)
    oprot:writeString(self.configId)
    oprot:writeFieldEnd()
  end
  if self.level then
    oprot:writeFieldBegin('level', TType.I32, 3)
    oprot:writeI32(self.level)
    oprot:writeFieldEnd()
  end
  if self.quality then
    oprot:writeFieldBegin('quality', TType.I32, 4)
    oprot:writeI32(self.quality)
    oprot:writeFieldEnd()
  end
  if self.enchantPos2Item then
    oprot:writeFieldBegin('enchantPos2Item', TType.MAP, 5)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.enchantPos2Item))
    for kiter42,viter43 in pairs(self.enchantPos2Item) do
      oprot:writeI32(kiter42)
      oprot:writeString(viter43)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.essencePos2Item then
    oprot:writeFieldBegin('essencePos2Item', TType.MAP, 6)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.essencePos2Item))
    for kiter44,viter45 in pairs(self.essencePos2Item) do
      oprot:writeI32(kiter44)
      oprot:writeString(viter45)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.jewelleryPos2Item then
    oprot:writeFieldBegin('jewelleryPos2Item', TType.MAP, 7)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.jewelleryPos2Item))
    for kiter46,viter47 in pairs(self.jewelleryPos2Item) do
      oprot:writeI32(kiter46)
      oprot:writeString(viter47)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ItemDTO = __TObject:new{
  configId,
  num
}

function ItemDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.configId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.num = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ItemDTO:write(oprot)
  oprot:writeStructBegin('ItemDTO')
  if self.configId then
    oprot:writeFieldBegin('configId', TType.STRING, 1)
    oprot:writeString(self.configId)
    oprot:writeFieldEnd()
  end
  if self.num then
    oprot:writeFieldBegin('num', TType.I32, 2)
    oprot:writeI32(self.num)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SkillDTO = __TObject:new{
  configId,
  lvl
}

function SkillDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.configId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.lvl = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SkillDTO:write(oprot)
  oprot:writeStructBegin('SkillDTO')
  if self.configId then
    oprot:writeFieldBegin('configId', TType.STRING, 1)
    oprot:writeString(self.configId)
    oprot:writeFieldEnd()
  end
  if self.lvl then
    oprot:writeFieldBegin('lvl', TType.I32, 2)
    oprot:writeI32(self.lvl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

HeroDTO = __TObject:new{
  id,
  configId,
  weapon,
  armor,
  exp,
  level,
  quality,
  skill1Param,
  skill2Param,
  skills,
  astrologyConfigIdList
}

function HeroDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.configId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.weapon = WeaponDTO:new{}
        self.weapon:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.armor = ArmorDTO:new{}
        self.armor:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.exp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.level = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.quality = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.DOUBLE then
        self.skill1Param = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.DOUBLE then
        self.skill2Param = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.skills = {}
        local _etype51, _size48 = iprot:readListBegin()
        for _i=1,_size48 do
          local _elem52 = SkillDTO:new{}
          _elem52:read(iprot)
          table.insert(self.skills, _elem52)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.astrologyConfigIdList = {}
        local _etype56, _size53 = iprot:readListBegin()
        for _i=1,_size53 do
          local _elem57 = iprot:readString()
          table.insert(self.astrologyConfigIdList, _elem57)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function HeroDTO:write(oprot)
  oprot:writeStructBegin('HeroDTO')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.configId then
    oprot:writeFieldBegin('configId', TType.STRING, 2)
    oprot:writeString(self.configId)
    oprot:writeFieldEnd()
  end
  if self.weapon then
    oprot:writeFieldBegin('weapon', TType.STRUCT, 3)
    self.weapon:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.armor then
    oprot:writeFieldBegin('armor', TType.STRUCT, 4)
    self.armor:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.exp then
    oprot:writeFieldBegin('exp', TType.I32, 5)
    oprot:writeI32(self.exp)
    oprot:writeFieldEnd()
  end
  if self.level then
    oprot:writeFieldBegin('level', TType.I32, 6)
    oprot:writeI32(self.level)
    oprot:writeFieldEnd()
  end
  if self.quality then
    oprot:writeFieldBegin('quality', TType.I32, 7)
    oprot:writeI32(self.quality)
    oprot:writeFieldEnd()
  end
  if self.skill1Param then
    oprot:writeFieldBegin('skill1Param', TType.DOUBLE, 8)
    oprot:writeDouble(self.skill1Param)
    oprot:writeFieldEnd()
  end
  if self.skill2Param then
    oprot:writeFieldBegin('skill2Param', TType.DOUBLE, 9)
    oprot:writeDouble(self.skill2Param)
    oprot:writeFieldEnd()
  end
  if self.skills then
    oprot:writeFieldBegin('skills', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.skills)
    for _,iter58 in ipairs(self.skills) do
      iter58:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.astrologyConfigIdList then
    oprot:writeFieldBegin('astrologyConfigIdList', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.astrologyConfigIdList)
    for _,iter59 in ipairs(self.astrologyConfigIdList) do
      oprot:writeString(iter59)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MagicCircleDTO = __TObject:new{
  id,
  configId,
  level
}

function MagicCircleDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.configId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.level = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MagicCircleDTO:write(oprot)
  oprot:writeStructBegin('MagicCircleDTO')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.configId then
    oprot:writeFieldBegin('configId', TType.STRING, 2)
    oprot:writeString(self.configId)
    oprot:writeFieldEnd()
  end
  if self.level then
    oprot:writeFieldBegin('level', TType.I32, 3)
    oprot:writeI32(self.level)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ShopPoolDTO = __TObject:new{
  shopPoolId,
  shopPoolConfigId,
  isBuy
}

function ShopPoolDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.shopPoolId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.shopPoolConfigId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.isBuy = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ShopPoolDTO:write(oprot)
  oprot:writeStructBegin('ShopPoolDTO')
  if self.shopPoolId then
    oprot:writeFieldBegin('shopPoolId', TType.STRING, 1)
    oprot:writeString(self.shopPoolId)
    oprot:writeFieldEnd()
  end
  if self.shopPoolConfigId then
    oprot:writeFieldBegin('shopPoolConfigId', TType.STRING, 2)
    oprot:writeString(self.shopPoolConfigId)
    oprot:writeFieldEnd()
  end
  if self.isBuy then
    oprot:writeFieldBegin('isBuy', TType.BOOL, 3)
    oprot:writeBool(self.isBuy)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildMemberDTO = __TObject:new{
  summonerId,
  summonerName,
  summonerLvl,
  dayDonate,
  weekDonate,
  memberType
}

function GuildMemberDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.summonerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.summonerName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.summonerLvl = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.dayDonate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.weekDonate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.memberType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildMemberDTO:write(oprot)
  oprot:writeStructBegin('GuildMemberDTO')
  if self.summonerId then
    oprot:writeFieldBegin('summonerId', TType.STRING, 1)
    oprot:writeString(self.summonerId)
    oprot:writeFieldEnd()
  end
  if self.summonerName then
    oprot:writeFieldBegin('summonerName', TType.STRING, 2)
    oprot:writeString(self.summonerName)
    oprot:writeFieldEnd()
  end
  if self.summonerLvl then
    oprot:writeFieldBegin('summonerLvl', TType.I32, 3)
    oprot:writeI32(self.summonerLvl)
    oprot:writeFieldEnd()
  end
  if self.dayDonate then
    oprot:writeFieldBegin('dayDonate', TType.I32, 4)
    oprot:writeI32(self.dayDonate)
    oprot:writeFieldEnd()
  end
  if self.weekDonate then
    oprot:writeFieldBegin('weekDonate', TType.I32, 5)
    oprot:writeI32(self.weekDonate)
    oprot:writeFieldEnd()
  end
  if self.memberType then
    oprot:writeFieldBegin('memberType', TType.I32, 6)
    oprot:writeI32(self.memberType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildBriefDTO = __TObject:new{
  id,
  serialNum,
  name,
  lvl,
  declaration,
  guildType,
  populationNow,
  needVerify,
  weekDonate,
  dayDonate
}

function GuildBriefDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.serialNum = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.lvl = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.declaration = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.guildType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.populationNow = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.BOOL then
        self.needVerify = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I32 then
        self.weekDonate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.dayDonate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildBriefDTO:write(oprot)
  oprot:writeStructBegin('GuildBriefDTO')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.serialNum then
    oprot:writeFieldBegin('serialNum', TType.STRING, 2)
    oprot:writeString(self.serialNum)
    oprot:writeFieldEnd()
  end
  if self.name then
    oprot:writeFieldBegin('name', TType.STRING, 3)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.lvl then
    oprot:writeFieldBegin('lvl', TType.I32, 4)
    oprot:writeI32(self.lvl)
    oprot:writeFieldEnd()
  end
  if self.declaration then
    oprot:writeFieldBegin('declaration', TType.STRING, 5)
    oprot:writeString(self.declaration)
    oprot:writeFieldEnd()
  end
  if self.guildType then
    oprot:writeFieldBegin('guildType', TType.I32, 6)
    oprot:writeI32(self.guildType)
    oprot:writeFieldEnd()
  end
  if self.populationNow then
    oprot:writeFieldBegin('populationNow', TType.I32, 7)
    oprot:writeI32(self.populationNow)
    oprot:writeFieldEnd()
  end
  if self.needVerify then
    oprot:writeFieldBegin('needVerify', TType.BOOL, 8)
    oprot:writeBool(self.needVerify)
    oprot:writeFieldEnd()
  end
  if self.weekDonate then
    oprot:writeFieldBegin('weekDonate', TType.I32, 9)
    oprot:writeI32(self.weekDonate)
    oprot:writeFieldEnd()
  end
  if self.dayDonate then
    oprot:writeFieldBegin('dayDonate', TType.I32, 10)
    oprot:writeI32(self.dayDonate)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildDetailDTO = __TObject:new{
  guildBrief,
  affiche,
  memberList
}

function GuildDetailDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.guildBrief = GuildBriefDTO:new{}
        self.guildBrief:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.affiche = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.memberList = {}
        local _etype63, _size60 = iprot:readListBegin()
        for _i=1,_size60 do
          local _elem64 = GuildMemberDTO:new{}
          _elem64:read(iprot)
          table.insert(self.memberList, _elem64)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildDetailDTO:write(oprot)
  oprot:writeStructBegin('GuildDetailDTO')
  if self.guildBrief then
    oprot:writeFieldBegin('guildBrief', TType.STRUCT, 1)
    self.guildBrief:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.affiche then
    oprot:writeFieldBegin('affiche', TType.STRING, 2)
    oprot:writeString(self.affiche)
    oprot:writeFieldEnd()
  end
  if self.memberList then
    oprot:writeFieldBegin('memberList', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.memberList)
    for _,iter65 in ipairs(self.memberList) do
      iter65:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GuildInfoDTO = __TObject:new{
  id,
  serialNum,
  guildCoin,
  memberType
}

function GuildInfoDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.serialNum = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.guildCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.memberType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GuildInfoDTO:write(oprot)
  oprot:writeStructBegin('GuildInfoDTO')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.serialNum then
    oprot:writeFieldBegin('serialNum', TType.STRING, 2)
    oprot:writeString(self.serialNum)
    oprot:writeFieldEnd()
  end
  if self.guildCoin then
    oprot:writeFieldBegin('guildCoin', TType.I32, 3)
    oprot:writeI32(self.guildCoin)
    oprot:writeFieldEnd()
  end
  if self.memberType then
    oprot:writeFieldBegin('memberType', TType.I32, 4)
    oprot:writeI32(self.memberType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SummonerDTO = __TObject:new{
  id,
  nickName,
  level,
  gold,
  heros,
  stamina,
  exp,
  items,
  magiccCircles,
  alchemyCompoesFormula,
  alchemyDecomposeFormula,
  enchantExp,
  enchantLevel,
  enchantComposeFormula,
  essenceExp,
  essenceLevel,
  essenceComposeFormula,
  jewelleryExp,
  jewelleryLevel,
  jewelleryComposeFormula,
  goldTradingLeftTimes,
  goldTradingLeftCDs,
  diamondTradingLeftCDs,
  varietyRefreshCount,
  varietyCDLeftS,
  varietyPools,
  profiteerRefreshCount,
  profiteerCDLeftS,
  profiteerPools,
  slaughterRefreshCount,
  slaughterCDLeftS,
  slaughterPools,
  profiteerEndTimeS,
  slaughterEndTimeS,
  purchasedItemId,
  chargeCardLeftDay,
  chargeCardTasks,
  staminaPurchaseLeftTimes,
  staminaCDs,
  moneyTreePurchaseLeftTimes,
  skillPoint,
  skillPointCDs,
  dailyTask2Num,
  mopUpTicketTasks,
  nextStaminaTaskId,
  wildFightLeftTimes,
  levelFightLeftTimes,
  guildInfo,
  GuildShopPools,
  guildShopAutoRefreshCDLefts
}

function SummonerDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.nickName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.level = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.gold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.heros = {}
        local _etype69, _size66 = iprot:readListBegin()
        for _i=1,_size66 do
          local _elem70 = HeroDTO:new{}
          _elem70:read(iprot)
          table.insert(self.heros, _elem70)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.stamina = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.exp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.LIST then
        self.items = {}
        local _etype74, _size71 = iprot:readListBegin()
        for _i=1,_size71 do
          local _elem75 = ItemDTO:new{}
          _elem75:read(iprot)
          table.insert(self.items, _elem75)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.LIST then
        self.magiccCircles = {}
        local _etype79, _size76 = iprot:readListBegin()
        for _i=1,_size76 do
          local _elem80 = MagicCircleDTO:new{}
          _elem80:read(iprot)
          table.insert(self.magiccCircles, _elem80)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.alchemyCompoesFormula = {}
        local _etype84, _size81 = iprot:readListBegin()
        for _i=1,_size81 do
          local _elem85 = iprot:readString()
          table.insert(self.alchemyCompoesFormula, _elem85)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.alchemyDecomposeFormula = {}
        local _etype89, _size86 = iprot:readListBegin()
        for _i=1,_size86 do
          local _elem90 = iprot:readString()
          table.insert(self.alchemyDecomposeFormula, _elem90)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I32 then
        self.enchantExp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.enchantLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.LIST then
        self.enchantComposeFormula = {}
        local _etype94, _size91 = iprot:readListBegin()
        for _i=1,_size91 do
          local _elem95 = iprot:readString()
          table.insert(self.enchantComposeFormula, _elem95)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.essenceExp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.essenceLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.essenceComposeFormula = {}
        local _etype99, _size96 = iprot:readListBegin()
        for _i=1,_size96 do
          local _elem100 = iprot:readString()
          table.insert(self.essenceComposeFormula, _elem100)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.jewelleryExp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.jewelleryLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.LIST then
        self.jewelleryComposeFormula = {}
        local _etype104, _size101 = iprot:readListBegin()
        for _i=1,_size101 do
          local _elem105 = iprot:readString()
          table.insert(self.jewelleryComposeFormula, _elem105)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I32 then
        self.goldTradingLeftTimes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.I32 then
        self.goldTradingLeftCDs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.I32 then
        self.diamondTradingLeftCDs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.I32 then
        self.varietyRefreshCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.I32 then
        self.varietyCDLeftS = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 29 then
      if ftype == TType.LIST then
        self.varietyPools = {}
        local _etype109, _size106 = iprot:readListBegin()
        for _i=1,_size106 do
          local _elem110 = ShopPoolDTO:new{}
          _elem110:read(iprot)
          table.insert(self.varietyPools, _elem110)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.I32 then
        self.profiteerRefreshCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.profiteerCDLeftS = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.LIST then
        self.profiteerPools = {}
        local _etype114, _size111 = iprot:readListBegin()
        for _i=1,_size111 do
          local _elem115 = ShopPoolDTO:new{}
          _elem115:read(iprot)
          table.insert(self.profiteerPools, _elem115)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.I32 then
        self.slaughterRefreshCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.I32 then
        self.slaughterCDLeftS = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.LIST then
        self.slaughterPools = {}
        local _etype119, _size116 = iprot:readListBegin()
        for _i=1,_size116 do
          local _elem120 = ShopPoolDTO:new{}
          _elem120:read(iprot)
          table.insert(self.slaughterPools, _elem120)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 36 then
      if ftype == TType.I32 then
        self.profiteerEndTimeS = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 37 then
      if ftype == TType.I32 then
        self.slaughterEndTimeS = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 38 then
      if ftype == TType.LIST then
        self.purchasedItemId = {}
        local _etype124, _size121 = iprot:readListBegin()
        for _i=1,_size121 do
          local _elem125 = iprot:readString()
          table.insert(self.purchasedItemId, _elem125)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 39 then
      if ftype == TType.I32 then
        self.chargeCardLeftDay = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.LIST then
        self.chargeCardTasks = {}
        local _etype129, _size126 = iprot:readListBegin()
        for _i=1,_size126 do
          local _elem130 = iprot:readString()
          table.insert(self.chargeCardTasks, _elem130)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.I32 then
        self.staminaPurchaseLeftTimes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.I32 then
        self.staminaCDs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.I32 then
        self.moneyTreePurchaseLeftTimes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.I32 then
        self.skillPoint = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 45 then
      if ftype == TType.I32 then
        self.skillPointCDs = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 46 then
      if ftype == TType.MAP then
        self.dailyTask2Num = {}
        local _ktype132, _vtype133, _size131 = iprot:readMapBegin() 
        for _i=1,_size131 do
          local _key135 = iprot:readString()
          local _val136 = iprot:readI32()
          self.dailyTask2Num[_key135] = _val136
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 47 then
      if ftype == TType.LIST then
        self.mopUpTicketTasks = {}
        local _etype140, _size137 = iprot:readListBegin()
        for _i=1,_size137 do
          local _elem141 = iprot:readString()
          table.insert(self.mopUpTicketTasks, _elem141)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 48 then
      if ftype == TType.STRING then
        self.nextStaminaTaskId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 49 then
      if ftype == TType.MAP then
        self.wildFightLeftTimes = {}
        local _ktype143, _vtype144, _size142 = iprot:readMapBegin() 
        for _i=1,_size142 do
          local _key146 = iprot:readString()
          local _val147 = iprot:readI32()
          self.wildFightLeftTimes[_key146] = _val147
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.MAP then
        self.levelFightLeftTimes = {}
        local _ktype149, _vtype150, _size148 = iprot:readMapBegin() 
        for _i=1,_size148 do
          local _key152 = iprot:readString()
          local _val153 = iprot:readI32()
          self.levelFightLeftTimes[_key152] = _val153
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 51 then
      if ftype == TType.STRUCT then
        self.guildInfo = GuildInfoDTO:new{}
        self.guildInfo:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 52 then
      if ftype == TType.LIST then
        self.GuildShopPools = {}
        local _etype157, _size154 = iprot:readListBegin()
        for _i=1,_size154 do
          local _elem158 = ShopPoolDTO:new{}
          _elem158:read(iprot)
          table.insert(self.GuildShopPools, _elem158)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 53 then
      if ftype == TType.I32 then
        self.guildShopAutoRefreshCDLefts = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SummonerDTO:write(oprot)
  oprot:writeStructBegin('SummonerDTO')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.nickName then
    oprot:writeFieldBegin('nickName', TType.STRING, 2)
    oprot:writeString(self.nickName)
    oprot:writeFieldEnd()
  end
  if self.level then
    oprot:writeFieldBegin('level', TType.I32, 3)
    oprot:writeI32(self.level)
    oprot:writeFieldEnd()
  end
  if self.gold then
    oprot:writeFieldBegin('gold', TType.I32, 4)
    oprot:writeI32(self.gold)
    oprot:writeFieldEnd()
  end
  if self.heros then
    oprot:writeFieldBegin('heros', TType.LIST, 5)
    oprot:writeListBegin(TType.STRUCT, #self.heros)
    for _,iter159 in ipairs(self.heros) do
      iter159:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.stamina then
    oprot:writeFieldBegin('stamina', TType.I32, 6)
    oprot:writeI32(self.stamina)
    oprot:writeFieldEnd()
  end
  if self.exp then
    oprot:writeFieldBegin('exp', TType.I32, 7)
    oprot:writeI32(self.exp)
    oprot:writeFieldEnd()
  end
  if self.items then
    oprot:writeFieldBegin('items', TType.LIST, 8)
    oprot:writeListBegin(TType.STRUCT, #self.items)
    for _,iter160 in ipairs(self.items) do
      iter160:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.magiccCircles then
    oprot:writeFieldBegin('magiccCircles', TType.LIST, 9)
    oprot:writeListBegin(TType.STRUCT, #self.magiccCircles)
    for _,iter161 in ipairs(self.magiccCircles) do
      iter161:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.alchemyCompoesFormula then
    oprot:writeFieldBegin('alchemyCompoesFormula', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.alchemyCompoesFormula)
    for _,iter162 in ipairs(self.alchemyCompoesFormula) do
      oprot:writeString(iter162)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.alchemyDecomposeFormula then
    oprot:writeFieldBegin('alchemyDecomposeFormula', TType.LIST, 13)
    oprot:writeListBegin(TType.STRING, #self.alchemyDecomposeFormula)
    for _,iter163 in ipairs(self.alchemyDecomposeFormula) do
      oprot:writeString(iter163)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.enchantExp then
    oprot:writeFieldBegin('enchantExp', TType.I32, 14)
    oprot:writeI32(self.enchantExp)
    oprot:writeFieldEnd()
  end
  if self.enchantLevel then
    oprot:writeFieldBegin('enchantLevel', TType.I32, 15)
    oprot:writeI32(self.enchantLevel)
    oprot:writeFieldEnd()
  end
  if self.enchantComposeFormula then
    oprot:writeFieldBegin('enchantComposeFormula', TType.LIST, 16)
    oprot:writeListBegin(TType.STRING, #self.enchantComposeFormula)
    for _,iter164 in ipairs(self.enchantComposeFormula) do
      oprot:writeString(iter164)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.essenceExp then
    oprot:writeFieldBegin('essenceExp', TType.I32, 17)
    oprot:writeI32(self.essenceExp)
    oprot:writeFieldEnd()
  end
  if self.essenceLevel then
    oprot:writeFieldBegin('essenceLevel', TType.I32, 19)
    oprot:writeI32(self.essenceLevel)
    oprot:writeFieldEnd()
  end
  if self.essenceComposeFormula then
    oprot:writeFieldBegin('essenceComposeFormula', TType.LIST, 20)
    oprot:writeListBegin(TType.STRING, #self.essenceComposeFormula)
    for _,iter165 in ipairs(self.essenceComposeFormula) do
      oprot:writeString(iter165)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.jewelleryExp then
    oprot:writeFieldBegin('jewelleryExp', TType.I32, 21)
    oprot:writeI32(self.jewelleryExp)
    oprot:writeFieldEnd()
  end
  if self.jewelleryLevel then
    oprot:writeFieldBegin('jewelleryLevel', TType.I32, 22)
    oprot:writeI32(self.jewelleryLevel)
    oprot:writeFieldEnd()
  end
  if self.jewelleryComposeFormula then
    oprot:writeFieldBegin('jewelleryComposeFormula', TType.LIST, 23)
    oprot:writeListBegin(TType.STRING, #self.jewelleryComposeFormula)
    for _,iter166 in ipairs(self.jewelleryComposeFormula) do
      oprot:writeString(iter166)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.goldTradingLeftTimes then
    oprot:writeFieldBegin('goldTradingLeftTimes', TType.I32, 24)
    oprot:writeI32(self.goldTradingLeftTimes)
    oprot:writeFieldEnd()
  end
  if self.goldTradingLeftCDs then
    oprot:writeFieldBegin('goldTradingLeftCDs', TType.I32, 25)
    oprot:writeI32(self.goldTradingLeftCDs)
    oprot:writeFieldEnd()
  end
  if self.diamondTradingLeftCDs then
    oprot:writeFieldBegin('diamondTradingLeftCDs', TType.I32, 26)
    oprot:writeI32(self.diamondTradingLeftCDs)
    oprot:writeFieldEnd()
  end
  if self.varietyRefreshCount then
    oprot:writeFieldBegin('varietyRefreshCount', TType.I32, 27)
    oprot:writeI32(self.varietyRefreshCount)
    oprot:writeFieldEnd()
  end
  if self.varietyCDLeftS then
    oprot:writeFieldBegin('varietyCDLeftS', TType.I32, 28)
    oprot:writeI32(self.varietyCDLeftS)
    oprot:writeFieldEnd()
  end
  if self.varietyPools then
    oprot:writeFieldBegin('varietyPools', TType.LIST, 29)
    oprot:writeListBegin(TType.STRUCT, #self.varietyPools)
    for _,iter167 in ipairs(self.varietyPools) do
      iter167:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.profiteerRefreshCount then
    oprot:writeFieldBegin('profiteerRefreshCount', TType.I32, 30)
    oprot:writeI32(self.profiteerRefreshCount)
    oprot:writeFieldEnd()
  end
  if self.profiteerCDLeftS then
    oprot:writeFieldBegin('profiteerCDLeftS', TType.I32, 31)
    oprot:writeI32(self.profiteerCDLeftS)
    oprot:writeFieldEnd()
  end
  if self.profiteerPools then
    oprot:writeFieldBegin('profiteerPools', TType.LIST, 32)
    oprot:writeListBegin(TType.STRUCT, #self.profiteerPools)
    for _,iter168 in ipairs(self.profiteerPools) do
      iter168:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.slaughterRefreshCount then
    oprot:writeFieldBegin('slaughterRefreshCount', TType.I32, 33)
    oprot:writeI32(self.slaughterRefreshCount)
    oprot:writeFieldEnd()
  end
  if self.slaughterCDLeftS then
    oprot:writeFieldBegin('slaughterCDLeftS', TType.I32, 34)
    oprot:writeI32(self.slaughterCDLeftS)
    oprot:writeFieldEnd()
  end
  if self.slaughterPools then
    oprot:writeFieldBegin('slaughterPools', TType.LIST, 35)
    oprot:writeListBegin(TType.STRUCT, #self.slaughterPools)
    for _,iter169 in ipairs(self.slaughterPools) do
      iter169:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.profiteerEndTimeS then
    oprot:writeFieldBegin('profiteerEndTimeS', TType.I32, 36)
    oprot:writeI32(self.profiteerEndTimeS)
    oprot:writeFieldEnd()
  end
  if self.slaughterEndTimeS then
    oprot:writeFieldBegin('slaughterEndTimeS', TType.I32, 37)
    oprot:writeI32(self.slaughterEndTimeS)
    oprot:writeFieldEnd()
  end
  if self.purchasedItemId then
    oprot:writeFieldBegin('purchasedItemId', TType.LIST, 38)
    oprot:writeListBegin(TType.STRING, #self.purchasedItemId)
    for _,iter170 in ipairs(self.purchasedItemId) do
      oprot:writeString(iter170)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.chargeCardLeftDay then
    oprot:writeFieldBegin('chargeCardLeftDay', TType.I32, 39)
    oprot:writeI32(self.chargeCardLeftDay)
    oprot:writeFieldEnd()
  end
  if self.chargeCardTasks then
    oprot:writeFieldBegin('chargeCardTasks', TType.LIST, 40)
    oprot:writeListBegin(TType.STRING, #self.chargeCardTasks)
    for _,iter171 in ipairs(self.chargeCardTasks) do
      oprot:writeString(iter171)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.staminaPurchaseLeftTimes then
    oprot:writeFieldBegin('staminaPurchaseLeftTimes', TType.I32, 41)
    oprot:writeI32(self.staminaPurchaseLeftTimes)
    oprot:writeFieldEnd()
  end
  if self.staminaCDs then
    oprot:writeFieldBegin('staminaCDs', TType.I32, 42)
    oprot:writeI32(self.staminaCDs)
    oprot:writeFieldEnd()
  end
  if self.moneyTreePurchaseLeftTimes then
    oprot:writeFieldBegin('moneyTreePurchaseLeftTimes', TType.I32, 43)
    oprot:writeI32(self.moneyTreePurchaseLeftTimes)
    oprot:writeFieldEnd()
  end
  if self.skillPoint then
    oprot:writeFieldBegin('skillPoint', TType.I32, 44)
    oprot:writeI32(self.skillPoint)
    oprot:writeFieldEnd()
  end
  if self.skillPointCDs then
    oprot:writeFieldBegin('skillPointCDs', TType.I32, 45)
    oprot:writeI32(self.skillPointCDs)
    oprot:writeFieldEnd()
  end
  if self.dailyTask2Num then
    oprot:writeFieldBegin('dailyTask2Num', TType.MAP, 46)
    oprot:writeMapBegin(TType.STRING, TType.I32, ttable_size(self.dailyTask2Num))
    for kiter172,viter173 in pairs(self.dailyTask2Num) do
      oprot:writeString(kiter172)
      oprot:writeI32(viter173)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.mopUpTicketTasks then
    oprot:writeFieldBegin('mopUpTicketTasks', TType.LIST, 47)
    oprot:writeListBegin(TType.STRING, #self.mopUpTicketTasks)
    for _,iter174 in ipairs(self.mopUpTicketTasks) do
      oprot:writeString(iter174)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.nextStaminaTaskId then
    oprot:writeFieldBegin('nextStaminaTaskId', TType.STRING, 48)
    oprot:writeString(self.nextStaminaTaskId)
    oprot:writeFieldEnd()
  end
  if self.wildFightLeftTimes then
    oprot:writeFieldBegin('wildFightLeftTimes', TType.MAP, 49)
    oprot:writeMapBegin(TType.STRING, TType.I32, ttable_size(self.wildFightLeftTimes))
    for kiter175,viter176 in pairs(self.wildFightLeftTimes) do
      oprot:writeString(kiter175)
      oprot:writeI32(viter176)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.levelFightLeftTimes then
    oprot:writeFieldBegin('levelFightLeftTimes', TType.MAP, 50)
    oprot:writeMapBegin(TType.STRING, TType.I32, ttable_size(self.levelFightLeftTimes))
    for kiter177,viter178 in pairs(self.levelFightLeftTimes) do
      oprot:writeString(kiter177)
      oprot:writeI32(viter178)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.guildInfo then
    oprot:writeFieldBegin('guildInfo', TType.STRUCT, 51)
    self.guildInfo:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.GuildShopPools then
    oprot:writeFieldBegin('GuildShopPools', TType.LIST, 52)
    oprot:writeListBegin(TType.STRUCT, #self.GuildShopPools)
    for _,iter179 in ipairs(self.GuildShopPools) do
      iter179:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.guildShopAutoRefreshCDLefts then
    oprot:writeFieldBegin('guildShopAutoRefreshCDLefts', TType.I32, 53)
    oprot:writeI32(self.guildShopAutoRefreshCDLefts)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UserDTO = __TObject:new{
  userId,
  diamond,
  vipLevel,
  totalChargeRMB,
  summoner
}

function UserDTO:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.userId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.diamond = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.vipLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.totalChargeRMB = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.summoner = SummonerDTO:new{}
        self.summoner:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserDTO:write(oprot)
  oprot:writeStructBegin('UserDTO')
  if self.userId then
    oprot:writeFieldBegin('userId', TType.STRING, 1)
    oprot:writeString(self.userId)
    oprot:writeFieldEnd()
  end
  if self.diamond then
    oprot:writeFieldBegin('diamond', TType.I32, 2)
    oprot:writeI32(self.diamond)
    oprot:writeFieldEnd()
  end
  if self.vipLevel then
    oprot:writeFieldBegin('vipLevel', TType.I32, 3)
    oprot:writeI32(self.vipLevel)
    oprot:writeFieldEnd()
  end
  if self.totalChargeRMB then
    oprot:writeFieldBegin('totalChargeRMB', TType.I32, 4)
    oprot:writeI32(self.totalChargeRMB)
    oprot:writeFieldEnd()
  end
  if self.summoner then
    oprot:writeFieldBegin('summoner', TType.STRUCT, 5)
    self.summoner:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ClientChannelRequest = __TObject:new{
  internalProtocolType,
  content
}

function ClientChannelRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.internalProtocolType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ClientChannelRequest:write(oprot)
  oprot:writeStructBegin('ClientChannelRequest')
  if self.internalProtocolType then
    oprot:writeFieldBegin('internalProtocolType', TType.I32, 1)
    oprot:writeI32(self.internalProtocolType)
    oprot:writeFieldEnd()
  end
  if self.content then
    oprot:writeFieldBegin('content', TType.STRING, 2)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ClientChannelResponse = __TObject:new{
  internalProtocolType,
  content
}

function ClientChannelResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.internalProtocolType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ClientChannelResponse:write(oprot)
  oprot:writeStructBegin('ClientChannelResponse')
  if self.internalProtocolType then
    oprot:writeFieldBegin('internalProtocolType', TType.I32, 1)
    oprot:writeI32(self.internalProtocolType)
    oprot:writeFieldEnd()
  end
  if self.content then
    oprot:writeFieldBegin('content', TType.STRING, 2)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LinkChannelRequest = __TObject:new{
  internalProtocolType,
  content,
  pUserId,
  zoneId
}

function LinkChannelRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.internalProtocolType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.pUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.zoneId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LinkChannelRequest:write(oprot)
  oprot:writeStructBegin('LinkChannelRequest')
  if self.internalProtocolType then
    oprot:writeFieldBegin('internalProtocolType', TType.I32, 1)
    oprot:writeI32(self.internalProtocolType)
    oprot:writeFieldEnd()
  end
  if self.content then
    oprot:writeFieldBegin('content', TType.STRING, 2)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  if self.pUserId then
    oprot:writeFieldBegin('pUserId', TType.STRING, 3)
    oprot:writeString(self.pUserId)
    oprot:writeFieldEnd()
  end
  if self.zoneId then
    oprot:writeFieldBegin('zoneId', TType.STRING, 4)
    oprot:writeString(self.zoneId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GSChannelResponse = __TObject:new{
  internalProtocolType,
  pUserId,
  content
}

function GSChannelResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.internalProtocolType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.pUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GSChannelResponse:write(oprot)
  oprot:writeStructBegin('GSChannelResponse')
  if self.internalProtocolType then
    oprot:writeFieldBegin('internalProtocolType', TType.I32, 1)
    oprot:writeI32(self.internalProtocolType)
    oprot:writeFieldEnd()
  end
  if self.pUserId then
    oprot:writeFieldBegin('pUserId', TType.STRING, 2)
    oprot:writeString(self.pUserId)
    oprot:writeFieldEnd()
  end
  if self.content then
    oprot:writeFieldBegin('content', TType.STRING, 3)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BroadcastChannel = __TObject:new{
  internalProtocolType,
  content
}

function BroadcastChannel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.internalProtocolType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BroadcastChannel:write(oprot)
  oprot:writeStructBegin('BroadcastChannel')
  if self.internalProtocolType then
    oprot:writeFieldBegin('internalProtocolType', TType.I32, 1)
    oprot:writeI32(self.internalProtocolType)
    oprot:writeFieldEnd()
  end
  if self.content then
    oprot:writeFieldBegin('content', TType.STRING, 2)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Challenge = __TObject:new{
  once
}

function Challenge:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.once = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Challenge:write(oprot)
  oprot:writeStructBegin('Challenge')
  if self.once then
    oprot:writeFieldBegin('once', TType.STRING, 1)
    oprot:writeString(self.once)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ExceptionNotice = __TObject:new{
  exceptionInfo
}

function ExceptionNotice:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.exceptionInfo = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ExceptionNotice:write(oprot)
  oprot:writeStructBegin('ExceptionNotice')
  if self.exceptionInfo then
    oprot:writeFieldBegin('exceptionInfo', TType.STRING, 1)
    oprot:writeString(self.exceptionInfo)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

KeepAlive = __TObject:new{

}

function KeepAlive:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function KeepAlive:write(oprot)
  oprot:writeStructBegin('KeepAlive')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateConfigData = __TObject:new{

}

function UpdateConfigData:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateConfigData:write(oprot)
  oprot:writeStructBegin('UpdateConfigData')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end