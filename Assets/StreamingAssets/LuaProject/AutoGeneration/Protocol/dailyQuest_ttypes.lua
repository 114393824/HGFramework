--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'dailyQuest_constants'

TaskType = {
  ChargeCard = 1,
  MopUp = 2
}

C2SGetDailyAction = __TObject:new{
  id
}

function C2SGetDailyAction:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SGetDailyAction:write(oprot)
  oprot:writeStructBegin('C2SGetDailyAction')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CGetDailyAction = __TObject:new{
  id,
  curGold,
  curDiamond,
  itemList,
  curSummonerLevel,
  curSummonerExp
}

function S2CGetDailyAction:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.curDiamond = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.itemList = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = ItemDTO:new{}
          _elem4:read(iprot)
          table.insert(self.itemList, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.curSummonerLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.curSummonerExp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CGetDailyAction:write(oprot)
  oprot:writeStructBegin('S2CGetDailyAction')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 2)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.curDiamond then
    oprot:writeFieldBegin('curDiamond', TType.I32, 3)
    oprot:writeI32(self.curDiamond)
    oprot:writeFieldEnd()
  end
  if self.itemList then
    oprot:writeFieldBegin('itemList', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.itemList)
    for _,iter5 in ipairs(self.itemList) do
      iter5:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.curSummonerLevel then
    oprot:writeFieldBegin('curSummonerLevel', TType.I32, 5)
    oprot:writeI32(self.curSummonerLevel)
    oprot:writeFieldEnd()
  end
  if self.curSummonerExp then
    oprot:writeFieldBegin('curSummonerExp', TType.I32, 6)
    oprot:writeI32(self.curSummonerExp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SGetDailyStamina = __TObject:new{
  id
}

function C2SGetDailyStamina:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SGetDailyStamina:write(oprot)
  oprot:writeStructBegin('C2SGetDailyStamina')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CGetDailyStamina = __TObject:new{
  id,
  stamina,
  nextTaskId
}

function S2CGetDailyStamina:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.stamina = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.nextTaskId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CGetDailyStamina:write(oprot)
  oprot:writeStructBegin('S2CGetDailyStamina')
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.stamina then
    oprot:writeFieldBegin('stamina', TType.I32, 2)
    oprot:writeI32(self.stamina)
    oprot:writeFieldEnd()
  end
  if self.nextTaskId then
    oprot:writeFieldBegin('nextTaskId', TType.STRING, 3)
    oprot:writeString(self.nextTaskId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SGetIDTask = __TObject:new{
  type,
  id
}

function C2SGetIDTask:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SGetIDTask:write(oprot)
  oprot:writeStructBegin('C2SGetIDTask')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 2)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CGetIDTask = __TObject:new{
  type,
  id,
  curNum
}

function S2CGetIDTask:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.curNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CGetIDTask:write(oprot)
  oprot:writeStructBegin('S2CGetIDTask')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.id then
    oprot:writeFieldBegin('id', TType.STRING, 2)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.curNum then
    oprot:writeFieldBegin('curNum', TType.I32, 3)
    oprot:writeI32(self.curNum)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CSyncDailyTask = __TObject:new{
  taskList
}

function S2CSyncDailyTask:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.MAP then
        self.taskList = {}
        local _ktype7, _vtype8, _size6 = iprot:readMapBegin() 
        for _i=1,_size6 do
          local _key10 = iprot:readString()
          local _val11 = iprot:readI32()
          self.taskList[_key10] = _val11
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CSyncDailyTask:write(oprot)
  oprot:writeStructBegin('S2CSyncDailyTask')
  if self.taskList then
    oprot:writeFieldBegin('taskList', TType.MAP, 1)
    oprot:writeMapBegin(TType.STRING, TType.I32, ttable_size(self.taskList))
    for kiter12,viter13 in pairs(self.taskList) do
      oprot:writeString(kiter12)
      oprot:writeI32(viter13)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CNewTask = __TObject:new{
  type,
  newTaskId
}

function S2CNewTask:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.newTaskId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CNewTask:write(oprot)
  oprot:writeStructBegin('S2CNewTask')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.newTaskId then
    oprot:writeFieldBegin('newTaskId', TType.STRING, 2)
    oprot:writeString(self.newTaskId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end