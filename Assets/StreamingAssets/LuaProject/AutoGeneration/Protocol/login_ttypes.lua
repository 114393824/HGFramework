--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'login_constants'

C2SLogin = __TObject:new{
  pid,
  channel,
  zoneId
}

function C2SLogin:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.pid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.channel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.zoneId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SLogin:write(oprot)
  oprot:writeStructBegin('C2SLogin')
  if self.pid then
    oprot:writeFieldBegin('pid', TType.STRING, 1)
    oprot:writeString(self.pid)
    oprot:writeFieldEnd()
  end
  if self.channel then
    oprot:writeFieldBegin('channel', TType.STRING, 2)
    oprot:writeString(self.channel)
    oprot:writeFieldEnd()
  end
  if self.zoneId then
    oprot:writeFieldBegin('zoneId', TType.STRING, 3)
    oprot:writeString(self.zoneId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CLogin = __TObject:new{
  loginStatus
}

function S2CLogin:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.loginStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CLogin:write(oprot)
  oprot:writeStructBegin('S2CLogin')
  if self.loginStatus then
    oprot:writeFieldBegin('loginStatus', TType.I32, 1)
    oprot:writeI32(self.loginStatus)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

L2SConnectNotice = __TObject:new{
  pid,
  channel,
  zoneId
}

function L2SConnectNotice:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.pid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.channel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.zoneId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function L2SConnectNotice:write(oprot)
  oprot:writeStructBegin('L2SConnectNotice')
  if self.pid then
    oprot:writeFieldBegin('pid', TType.STRING, 1)
    oprot:writeString(self.pid)
    oprot:writeFieldEnd()
  end
  if self.channel then
    oprot:writeFieldBegin('channel', TType.STRING, 2)
    oprot:writeString(self.channel)
    oprot:writeFieldEnd()
  end
  if self.zoneId then
    oprot:writeFieldBegin('zoneId', TType.STRING, 3)
    oprot:writeString(self.zoneId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

L2SDisConnectNotice = __TObject:new{

}

function L2SDisConnectNotice:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function L2SDisConnectNotice:write(oprot)
  oprot:writeStructBegin('L2SDisConnectNotice')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

L2SOffLineNotice = __TObject:new{
  zoneId
}

function L2SOffLineNotice:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.zoneId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function L2SOffLineNotice:write(oprot)
  oprot:writeStructBegin('L2SOffLineNotice')
  if self.zoneId then
    oprot:writeFieldBegin('zoneId', TType.STRING, 1)
    oprot:writeString(self.zoneId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BatchDisConnectNotice = __TObject:new{
  userIdList
}

function BatchDisConnectNotice:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.userIdList = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = iprot:readString()
          table.insert(self.userIdList, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BatchDisConnectNotice:write(oprot)
  oprot:writeStructBegin('BatchDisConnectNotice')
  if self.userIdList then
    oprot:writeFieldBegin('userIdList', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.userIdList)
    for _,iter5 in ipairs(self.userIdList) do
      oprot:writeString(iter5)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LoginRepeatNotice = __TObject:new{
  pUserId,
  linkId
}

function LoginRepeatNotice:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.pUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.linkId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LoginRepeatNotice:write(oprot)
  oprot:writeStructBegin('LoginRepeatNotice')
  if self.pUserId then
    oprot:writeFieldBegin('pUserId', TType.STRING, 1)
    oprot:writeString(self.pUserId)
    oprot:writeFieldEnd()
  end
  if self.linkId then
    oprot:writeFieldBegin('linkId', TType.STRING, 2)
    oprot:writeString(self.linkId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SSystemInfo = __TObject:new{
  clientVersion,
  systemVersion,
  system,
  source,
  mac,
  email,
  telephone,
  deviceResolution,
  device
}

function C2SSystemInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.clientVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.systemVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.system = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.source = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.mac = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.telephone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.deviceResolution = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.device = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SSystemInfo:write(oprot)
  oprot:writeStructBegin('C2SSystemInfo')
  if self.clientVersion then
    oprot:writeFieldBegin('clientVersion', TType.STRING, 2)
    oprot:writeString(self.clientVersion)
    oprot:writeFieldEnd()
  end
  if self.systemVersion then
    oprot:writeFieldBegin('systemVersion', TType.STRING, 3)
    oprot:writeString(self.systemVersion)
    oprot:writeFieldEnd()
  end
  if self.system then
    oprot:writeFieldBegin('system', TType.STRING, 4)
    oprot:writeString(self.system)
    oprot:writeFieldEnd()
  end
  if self.source then
    oprot:writeFieldBegin('source', TType.STRING, 5)
    oprot:writeString(self.source)
    oprot:writeFieldEnd()
  end
  if self.mac then
    oprot:writeFieldBegin('mac', TType.STRING, 7)
    oprot:writeString(self.mac)
    oprot:writeFieldEnd()
  end
  if self.email then
    oprot:writeFieldBegin('email', TType.STRING, 8)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.telephone then
    oprot:writeFieldBegin('telephone', TType.STRING, 9)
    oprot:writeString(self.telephone)
    oprot:writeFieldEnd()
  end
  if self.deviceResolution then
    oprot:writeFieldBegin('deviceResolution', TType.STRING, 12)
    oprot:writeString(self.deviceResolution)
    oprot:writeFieldEnd()
  end
  if self.device then
    oprot:writeFieldBegin('device', TType.STRING, 13)
    oprot:writeString(self.device)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

KeepLinkAlive = __TObject:new{

}

function KeepLinkAlive:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function KeepLinkAlive:write(oprot)
  oprot:writeStructBegin('KeepLinkAlive')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end