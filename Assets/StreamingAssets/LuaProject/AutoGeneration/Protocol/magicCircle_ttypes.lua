--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'magicCircle_constants'

C2SBuyMagicCircle = __TObject:new{
  magicCircleConfigId
}

function C2SBuyMagicCircle:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.magicCircleConfigId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SBuyMagicCircle:write(oprot)
  oprot:writeStructBegin('C2SBuyMagicCircle')
  if self.magicCircleConfigId then
    oprot:writeFieldBegin('magicCircleConfigId', TType.STRING, 1)
    oprot:writeString(self.magicCircleConfigId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CBuyMagicCircle = __TObject:new{
  magicCircleDTO,
  curGold
}

function S2CBuyMagicCircle:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.magicCircleDTO = MagicCircleDTO:new{}
        self.magicCircleDTO:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CBuyMagicCircle:write(oprot)
  oprot:writeStructBegin('S2CBuyMagicCircle')
  if self.magicCircleDTO then
    oprot:writeFieldBegin('magicCircleDTO', TType.STRUCT, 1)
    self.magicCircleDTO:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 2)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SMagicCircleIncrLevel = __TObject:new{
  magicCircleId
}

function C2SMagicCircleIncrLevel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.magicCircleId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SMagicCircleIncrLevel:write(oprot)
  oprot:writeStructBegin('C2SMagicCircleIncrLevel')
  if self.magicCircleId then
    oprot:writeFieldBegin('magicCircleId', TType.STRING, 1)
    oprot:writeString(self.magicCircleId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CMagicCircleIncrLevel = __TObject:new{
  magicCircleDTO,
  curGold,
  cost
}

function S2CMagicCircleIncrLevel:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.magicCircleDTO = MagicCircleDTO:new{}
        self.magicCircleDTO:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.cost = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = ItemDTO:new{}
          _elem4:read(iprot)
          table.insert(self.cost, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CMagicCircleIncrLevel:write(oprot)
  oprot:writeStructBegin('S2CMagicCircleIncrLevel')
  if self.magicCircleDTO then
    oprot:writeFieldBegin('magicCircleDTO', TType.STRUCT, 1)
    self.magicCircleDTO:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 2)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.cost then
    oprot:writeFieldBegin('cost', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.cost)
    for _,iter5 in ipairs(self.cost) do
      iter5:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end