--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'forging_constants'

ForgingType = {
  Jewellery = 1,
  Enchant = 2,
  Essence = 3
}

C2SForgingCompose = __TObject:new{
  type,
  formulaConfigId
}

function C2SForgingCompose:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.formulaConfigId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SForgingCompose:write(oprot)
  oprot:writeStructBegin('C2SForgingCompose')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.formulaConfigId then
    oprot:writeFieldBegin('formulaConfigId', TType.STRING, 2)
    oprot:writeString(self.formulaConfigId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CForgingCompose = __TObject:new{
  type,
  addItem,
  removeItems,
  curGold,
  curTypeExp,
  curTypeLevel,
  addTypeFormulas
}

function S2CForgingCompose:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.addItem = ItemDTO:new{}
        self.addItem:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.removeItems = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = ItemDTO:new{}
          _elem4:read(iprot)
          table.insert(self.removeItems, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.curTypeExp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.curTypeLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.addTypeFormulas = {}
        local _etype8, _size5 = iprot:readListBegin()
        for _i=1,_size5 do
          local _elem9 = iprot:readString()
          table.insert(self.addTypeFormulas, _elem9)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CForgingCompose:write(oprot)
  oprot:writeStructBegin('S2CForgingCompose')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.addItem then
    oprot:writeFieldBegin('addItem', TType.STRUCT, 2)
    self.addItem:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.removeItems then
    oprot:writeFieldBegin('removeItems', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.removeItems)
    for _,iter10 in ipairs(self.removeItems) do
      iter10:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 4)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.curTypeExp then
    oprot:writeFieldBegin('curTypeExp', TType.I32, 5)
    oprot:writeI32(self.curTypeExp)
    oprot:writeFieldEnd()
  end
  if self.curTypeLevel then
    oprot:writeFieldBegin('curTypeLevel', TType.I32, 6)
    oprot:writeI32(self.curTypeLevel)
    oprot:writeFieldEnd()
  end
  if self.addTypeFormulas then
    oprot:writeFieldBegin('addTypeFormulas', TType.LIST, 7)
    oprot:writeListBegin(TType.STRING, #self.addTypeFormulas)
    for _,iter11 in ipairs(self.addTypeFormulas) do
      oprot:writeString(iter11)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SFogingComposeOneKey = __TObject:new{
  type,
  formulaConfigId,
  count
}

function C2SFogingComposeOneKey:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.formulaConfigId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.count = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SFogingComposeOneKey:write(oprot)
  oprot:writeStructBegin('C2SFogingComposeOneKey')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.formulaConfigId then
    oprot:writeFieldBegin('formulaConfigId', TType.STRING, 2)
    oprot:writeString(self.formulaConfigId)
    oprot:writeFieldEnd()
  end
  if self.count then
    oprot:writeFieldBegin('count', TType.I32, 3)
    oprot:writeI32(self.count)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CForgingComposeOneKey = __TObject:new{
  type,
  addItem,
  removeItems,
  curGold,
  curTypeExp,
  curTypeLevel,
  addTypeFormulas
}

function S2CForgingComposeOneKey:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.addItem = {}
        local _etype15, _size12 = iprot:readListBegin()
        for _i=1,_size12 do
          local _elem16 = ItemDTO:new{}
          _elem16:read(iprot)
          table.insert(self.addItem, _elem16)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.removeItems = {}
        local _etype20, _size17 = iprot:readListBegin()
        for _i=1,_size17 do
          local _elem21 = ItemDTO:new{}
          _elem21:read(iprot)
          table.insert(self.removeItems, _elem21)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.curGold = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.curTypeExp = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.curTypeLevel = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.addTypeFormulas = {}
        local _etype25, _size22 = iprot:readListBegin()
        for _i=1,_size22 do
          local _elem26 = iprot:readString()
          table.insert(self.addTypeFormulas, _elem26)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CForgingComposeOneKey:write(oprot)
  oprot:writeStructBegin('S2CForgingComposeOneKey')
  if self.type then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.addItem then
    oprot:writeFieldBegin('addItem', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.addItem)
    for _,iter27 in ipairs(self.addItem) do
      iter27:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.removeItems then
    oprot:writeFieldBegin('removeItems', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.removeItems)
    for _,iter28 in ipairs(self.removeItems) do
      iter28:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.curGold then
    oprot:writeFieldBegin('curGold', TType.I32, 4)
    oprot:writeI32(self.curGold)
    oprot:writeFieldEnd()
  end
  if self.curTypeExp then
    oprot:writeFieldBegin('curTypeExp', TType.I32, 5)
    oprot:writeI32(self.curTypeExp)
    oprot:writeFieldEnd()
  end
  if self.curTypeLevel then
    oprot:writeFieldBegin('curTypeLevel', TType.I32, 6)
    oprot:writeI32(self.curTypeLevel)
    oprot:writeFieldEnd()
  end
  if self.addTypeFormulas then
    oprot:writeFieldBegin('addTypeFormulas', TType.LIST, 7)
    oprot:writeListBegin(TType.STRING, #self.addTypeFormulas)
    for _,iter29 in ipairs(self.addTypeFormulas) do
      oprot:writeString(iter29)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

C2SEquipForging = __TObject:new{
  forgingType,
  targetId,
  heroId,
  itemId,
  pos
}

function C2SEquipForging:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.forgingType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.targetId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.heroId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.pos = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function C2SEquipForging:write(oprot)
  oprot:writeStructBegin('C2SEquipForging')
  if self.forgingType then
    oprot:writeFieldBegin('forgingType', TType.I32, 1)
    oprot:writeI32(self.forgingType)
    oprot:writeFieldEnd()
  end
  if self.targetId then
    oprot:writeFieldBegin('targetId', TType.STRING, 2)
    oprot:writeString(self.targetId)
    oprot:writeFieldEnd()
  end
  if self.heroId then
    oprot:writeFieldBegin('heroId', TType.STRING, 3)
    oprot:writeString(self.heroId)
    oprot:writeFieldEnd()
  end
  if self.itemId then
    oprot:writeFieldBegin('itemId', TType.STRING, 4)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  if self.pos then
    oprot:writeFieldBegin('pos', TType.I32, 5)
    oprot:writeI32(self.pos)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

S2CEquipForging = __TObject:new{
  hero,
  removeItem
}

function S2CEquipForging:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.hero = HeroDTO:new{}
        self.hero:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.removeItem = ItemDTO:new{}
        self.removeItem:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function S2CEquipForging:write(oprot)
  oprot:writeStructBegin('S2CEquipForging')
  if self.hero then
    oprot:writeFieldBegin('hero', TType.STRUCT, 1)
    self.hero:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.removeItem then
    oprot:writeFieldBegin('removeItem', TType.STRUCT, 2)
    self.removeItem:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end